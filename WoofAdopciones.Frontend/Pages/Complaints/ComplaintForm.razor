@page "/Contact"
@inject SweetAlertService sweetAlertService
@inject IRepository repository

@if (loading)
{
    <Loading />
}else
{
    <EditForm EditContext="editContext" OnValidSubmit="CreteComplaintAsync">
        <DataAnnotationsValidator />

        <div class="card">
            <div class="card-header">
                <span>
                    <i class="oi oi-person" /> Denuncias
                </span>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-6">
                        <div class="mb-3">
                            <label>Descripción:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@Complaint.Description" />
                                <ValidationMessage For="@(() => Complaint.Description)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label>Dirección:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@Complaint.Address" />
                                <ValidationMessage For="@(() => Complaint.Address)" />
                            </div>
                        </div>
                    </div>
                    <div class="col-6">
                        <div class="mb-3">
                            <label>País:</label>
                            <div>
                                <select class="form-select" @onchange="CountryChangedAsync">
                                    <option value="0">-- Seleccione un país --</option>
                                    @if (countries is not null)
                                    {
                                        @foreach (var country in countries)
                                        {
                                            <option value="@country.Id">@country.Name</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label>Estado/Departamento:</label>
                            <div>
                                <select class="form-select" @onchange="StateChangedAsync">
                                    <option value="0">-- Seleccione un estado/departamento --</option>
                                    @if (states is not null)
                                    {
                                        @foreach (var state in states)
                                        {
                                            <option value="@state.Id">@state.Name</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label>Ciudad:</label>
                            <div>
                                <select class="form-select" @bind="Complaint.CityId">
                                    <option value="0">-- Seleccione una ciudad --</option>
                                    @if (cities is not null)
                                    {
                                        @foreach (var city in cities)
                                        {
                                            <option value="@city.Id">@city.Name</option>
                                        }
                                    }
                                </select>
                                <ValidationMessage For="@(() => Complaint.CityId)" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <a class="btn btn-warning btn-sm" @onclick=@(() => CreteComplaintAsync())><i class="oi oi-pencil" /> Editar</a>

    </EditForm>
}

@code {
    private List<Country>? countries;
    private List<State>? states;
    private List<City>? cities;
    private bool loading;
    private Complaint Complaint = new();
    private EditContext editContext = null!;


    protected override void OnInitialized()
    {
        editContext = new(Complaint);
    }


    protected override async Task OnInitializedAsync()
    {
        await LoadCountriesAsync();

    }

    private async Task LoadCountriesAsync()
    {
        loading = true;
        var responseHttp = await repository.GetAsync<List<Country>>("/api/countries/combo");
        if (responseHttp.Error)
        {
            loading = false;
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        countries = responseHttp.Response;
        loading = false;

    }
    private async Task CountryChangedAsync(ChangeEventArgs e)
    {
        var selectedCountry = Convert.ToInt32(e.Value!);
        await LoadStatesAsyn(selectedCountry);
        cities = null;
        Complaint.CityId = 0;
    }
    private async Task LoadStatesAsyn(int countryId)
    {
        var responseHttp = await repository.GetAsync<List<State>>($"/api/states/combo/{countryId}");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        states = responseHttp.Response;
    }
    private async Task StateChangedAsync(ChangeEventArgs e)
    {
        var selectedState = Convert.ToInt32(e.Value!);
        await LoadCitiesAsyn(selectedState);
        Complaint.CityId = 0;
    }
    private async Task LoadCitiesAsyn(int stateId)
    {
        var responseHttp = await repository.GetAsync<List<City>>($"/api/cities/combo/{stateId}");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        cities = responseHttp.Response;
    }

    private async Task CreteComplaintAsync()
    {
        loading = true;
        var responseHttp = await repository.PostAsync<Complaint>("/api/Complaints", Complaint);
        if (responseHttp.Error)
        {
            loading = false;
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        loading = false;
        await sweetAlertService.FireAsync("Confirmación", "Su denuncia ha sido creada con éxito.", SweetAlertIcon.Info);
    }

}
